#!/usr/bin/env python
#
# (c) 2013 Joost Yervante Damad <joost@damad.be>
# License: GPL

import sys

from PySide import QtGui, QtCore
from PySide.QtCore import Qt

from gui.parts import PartModel, PartTree
from gui.dialogs import PreferencesDialog, AddCatDialog, AddPartDialog

from data.data import Data

class Left(QtGui.QWidget):

  def __init__(self, part_model, parent):
    super(Left, self).__init__()
    vbox = QtGui.QVBoxLayout(self)
    hbox = QtGui.QHBoxLayout()
    hbox.addWidget(QtGui.QLabel("Search:"))
    self.search_le = QtGui.QLineEdit()
    hbox.addWidget(self.search_le)
    vbox.addLayout(hbox)
    self.part_tree = PartTree(part_model, parent)
    vbox.addWidget(self.part_tree)
    self.setLayout(vbox)

class Right(QtGui.QScrollArea):

  def __init__(self):
    super(Right, self).__init__()

  def set_nothing(self):
    self.setWidget(QtGui.QWidget())

  def set_category(self, cat):
    vbox = QtGui.QVBoxLayout()
    vbox.addWidget(QtGui.QLabel("Category: " + cat.name))
    items = cat.prop.items()
    if len(items) > 0:
      table = QtGui.QTableWidget(len(items), 2)
      table.setHorizontalHeaderLabels(['name','value'])
      p = 0
      for (k,v) in items:
        table.setItem(p,0,QtGui.QTableWidgetItem(k))
        table.setItem(p,1,QtGui.QTableWidgetItem(v))
        p = p + 1
      vbox.addWidget(table)
    w = QtGui.QWidget()
    w.setLayout(vbox)
    self.setWidget(w)

  def set_part(self, part):
    vbox = QtGui.QVBoxLayout()
    form_layout = QtGui.QFormLayout()
    def add(k,v,ro=False):
      x = QtGui.QLineEdit(v)
      x.setReadOnly(ro)
      form_layout.addRow(k, x)
    add("Category", part.cat.name, ro=True)
    add("Part", part.full_name, ro=True)
    add("Name", part.name, ro=True)
    add("Package", part.package, ro=True)
    single_value = QtGui.QCheckBox()
    single_value.setChecked(part.single_value)
    form_layout.addRow('Single-value', single_value)
    if part.single_value:
      add('Quantity', str(part.quantity))
    # bought when where price
    vbox.addLayout(form_layout)
    w = QtGui.QWidget()
    w.setLayout(vbox)
    self.setWidget(w)

class MainWin(QtGui.QMainWindow):

  def __init__(self):
    super(MainWin, self).__init__()

    self.cat = None

    self.settings = QtCore.QSettings()

    self.data = Data(self.settings)
    self.part_model = PartModel(self.data)

    menuBar = self.menuBar()
    fileMenu = menuBar.addMenu('&File')
    self.add_action(fileMenu, '&Quit', self.close, 'Ctrl+Q')

    editMenu = menuBar.addMenu('&Edit')
    self.add_action(editMenu, '&Preferences', self.preferences)

    groupMenu = menuBar.addMenu('&Category')
    self.add_action(groupMenu, '&Add', self.add_cat)
    
    groupMenu = menuBar.addMenu('&Part')
    self.add_action(groupMenu, '&Add', self.add_part)

    helpMenu = menuBar.addMenu('&Help')
    self.add_action(helpMenu, '&About', self.about)

    splitter = QtGui.QSplitter(self, QtCore.Qt.Horizontal)
    self.left = Left(self.part_model, self)
    splitter.addWidget(self.left)
    self.right = Right()
    splitter.addWidget(self.right)
    self.setCentralWidget(splitter)

    self.statusBar().showMessage("Ready.")

  def close(self):
    QtGui.qApp.quit()

  def about(self):
    a = """
<p align="center"><b>madinv</b><br/>madparts inventory tool</p>
<p align="center">(c) 2013 Joost Yervante Damad &lt;joost@damad.be&gt;</p>
<p align="center"><a href="http://madparts.org">http://madparts.org</a></p>
"""
    QtGui.QMessageBox.about(self, "about madparts", a)

  def preferences(self):
    dialog = PreferencesDialog(self, self.settings)
    dialog.exec_()

  def add_action(self, menu, text, slot, shortcut=None, checkable=False, checked=False):
    action = QtGui.QAction(text, self)
    if checkable:
      action.setCheckable(True)
      if checked:
        action.setChecked(True)
    menu.addAction(action)
    if slot == None:
      action.setDisabled(True)
    else:
      action.triggered.connect(slot)
    if shortcut != None: action.setShortcut(shortcut)
    return action

  def add_cat(self):
    dialog = AddCatDialog(self, self.data)
    if dialog.exec_() == QtGui.QDialog.Accepted:
      self.part_model.add_cat(dialog.result)

  def add_part(self):
    if self.cat is None:
      QtGui.QMessageBox.critical(self, "error", "select a category")
      return
    dialog = AddPartDialog(self, self.data, self.cat)
    if dialog.exec_() == QtGui.QDialog.Accepted:
      self.part_model.add_part(dialog.result)

  def category_selected(self, name):
    self.part = None
    self.cat = self.data.cat_by_name(name)
    print name, self.cat.prop
    self.right.set_category(self.cat)
     
  def part_selected(self, cat_name, full_name):
    self.cat = self.data.cat_by_name(cat_name)
    self.part = self.cat.part_by_fullname(full_name)
    self.right.set_part(self.part)

def gui_main():
  QtCore.QCoreApplication.setOrganizationName("madparts")
  QtCore.QCoreApplication.setOrganizationDomain("madparts.org")
  QtCore.QCoreApplication.setApplicationName("madinv")
  app = QtGui.QApplication(["madinv"])
  widget = MainWin()
  widget.show()
  return app.exec_()

if __name__ == '__main__':
  sys.exit(gui_main())
